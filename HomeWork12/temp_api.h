#include <stdint.h>
#include "storage.h"

// Структура для связи команды и указателя на функцию
struct CommandHandler {
    const char* command_name;
    ProcResult (*handler_func)(char*); // Указатель на функцию
};

//----------------------------------Function prototypes---------------------------

/**
 *  Возвращает список доступных команд
 *  @param arg используется для совместимости с остальными, параметра не требует (т.е. NULL)
 */
ProcResult help_cmd(char* arg);


/**
 *  Открывает .csv файл, создаёт хранилище и копирует содержимое файла
 *  @param arg  строка с именем файла
 *  @return результат попытки открытия файла
 */
ProcResult open_file_cmd(char* arg);

/**
 *  Печатает минимальное, максимальное и среднее значение температуры за запрашиваемый год
 *  @param arg  строка с значением года
 *  @return результат попытки найти и посчитать статистику
 */
ProcResult get_statistic_by_year_cmd(char* arg);

/**
 *  Печатает минимальное, максимальное и среднее значение температуры за запрашиваемый месяц
 *  @param arg  строка с значением месяца
 *  @return результат попытки найти и посчитать статистику
 */
ProcResult get_statistic_by_month_cmd(char* arg);

/**
 * Вносит новую запись в хранилище
 * @param arg   строка формата yyyy.mm.dd;hh:mm;ttt
 * @return результат попытки внесения данных 
 */
ProcResult add_new_entry_cmd(char* arg);

/**
 * Удаляет последнюю запись
 * @param arg нужен только для совместимости, принимает NULL
 * @return результат попытки удаления
 */
ProcResult delete_last_entry_cmd(char* arg);

/**
 * Удаляет запись с конкретными датой и временем
 * @param arg строка формата yyyy.mm.dd;hh:mm
 * @return результат попытки удаления
 */
ProcResult delete_entry_cmd(char* arg);

/**
 * Выводит всю сохранённую информацию, в зависимости от ключа сортировки
 * @param arg "ad" выведет данные, сортированные по возрастанию даты записи
 * @param arg "dd" выведет данные, сортированныев порядке убывания 
 * @param arg "at" выведет данные, сортированные в порядке возрастания температуры
 * @param arg "dt" выведет данные, сортированные в порядке убывания температуры
 * @return итог работы программы
 */
ProcResult show_all_data_cmd(char* arg);

/**
 * Выводит сообщение о неизвестной команде
 * @param arg нужен для совместимости, игнорирует параметр, пищем NULL
 * @return FAIL, при вызове программы всегда вызовет неудачный результат
 */
ProcResult unknown_command_cmd(char* arg);

/*  Расчёт параметров независим от его вариаций, пусть это год или месяц, с точки зрения приложения это будет
    выглядеть в виде различий диапазона расчёта.
*/

/**
*   Ищет минимальное значение температуры внутри полученного диапазона
*   @param range    Указатель на хранилище и число записей, упакованные в структуру
*   @return     Минимальное значение температуры
*/
int8_t min_temp(const DataRange* range);

/**
*   Ищет максимальное значение температуры внутри полученного диапазона
*   @param range    Указатель на хранилище и число записей, упакованные в структуру
*   @return     Максимальное значение температуры
*/
int8_t max_temp(const DataRange* range);

/**
*   Рсчитывает среднее значение температуры внутри запрашиваемого диапазона
*   @param range    Указатель на хранилище и число записей, упакованные в структуру
*   @return     Среднее значение температуры за диапазон
*/
double avg_temp(const DataRange*  range);